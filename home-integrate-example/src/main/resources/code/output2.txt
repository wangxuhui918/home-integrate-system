统一出参一般分为2种实现方式
一.固定返回类
1. 出参固定为OutputParamAb子类,例如

    @ApiOperation(value = "样例", notes = " ")
    @RequestMapping(value = "/example/output2", method = {RequestMethod.POST, RequestMethod.GET})
    @ResponseBody
    public OutputParamRe output2(@RequestBody InputParamRe<DemoVo> input) {
        return CodeUtils.go(new CodeRe("000000"));
    }
    注: 使用 CodeUtils.go返回相应的消息码以及前端接收的数据data(JSON格式)

二.自动处理
1. Api类使用 RuleAnnotationApi+Controller
2. 方法使用ResponseBody进行描述
3. 消息以及异常的返回不受void影响
此时发生变化的使用方式有如下:
1. 异常类: 自动捕获ExceptionRe基类,并作为反参消息码处理(数据为空),如下:
    @ApiOperation(value = "样例", notes = " ")
    @RequestMapping(value = "/example/output3", method = {RequestMethod.POST, RequestMethod.GET})
    @ResponseBody
    public void output3(@RequestBody InputParamRe<DemoVo> input) {
        throw new ExceptionError("药品{},库存不足", "阿莫西林");
    }

    前端收到的消息为:
    {
      "data": {
        "additionalProp1": {},
        "additionalProp2": {},
        "additionalProp3": {}
      },
      "i18n": "string",
      "inputData": {
        "demo_id": "string"
      },
      "pageNum": "string",
      "pageSize": "string",
      "userRe": {}
    }

    {
      "i18n": "cn",
      "codeBody": {
        "code": "000000",
        "i18n": "cn",
        "type": "false",
        "text": "药品阿莫西林,库存不足",
        "className": "com.guoshiyao.rely.exception.code.re.CodeAbE"
      },
      "data": null
    }
2. 正确的业务处理流程

    @ApiOperation(value = "样例", notes = " ")
    @RequestMapping(value = "/example/output3", method = {RequestMethod.POST, RequestMethod.GET})
    @ResponseBody
    public void output3(@RequestBody InputParamRe<DemoVo> input) {
        if (StrUtil.equals(input.getInputData().getName(), "阿莫西林")) {//正常的业务异常
            throw new ExceptionError("药品{},库存不足", "阿莫西林");
        } else {//继续处理流程
            //1. 进行库存扣减正常业务,此时会返回给前端内置true的消息体
            //2. 如果此时出现空指针等异常也会封装为false消息码体并返回
        }
    }